                                 概          念

控制反转 IoC(Inversion of Control)：
对象是被动接收依赖类而不是自己主动去找，协调依赖对象之间合作的责任从对象自身中转移出来。
面向切面编程 AOP(Aspect-Oriented Programming)

两个相互合作的类来完成业务逻辑，每个对象都要负责得到它的合作(依赖)对象，这样会导致代码耦合度高而且难以测试。
使用IoC，对象的依赖都是在对象创建时由负责协调系统中各个对象的外部实体提供的，这就是依赖被注入到对象中。
所以IoC意味着关于对象如何得到它的协作对象的责任反转了。

紧密耦合的代码难以测试，难以重用，难以理解，带来典型的“摧毁大堤”bug(如修改了一个bug会引来另一个或更多的bug)。
另一方面，完全没有耦合的代码什么也做不了。为了做一些，但需要小心管理。

减少耦合的一个通常的做法是将具体实现隐藏在接口下面，这样具体实现类的替换不会影响到引用类。
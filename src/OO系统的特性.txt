                                            OO系统的特性

任何面向对象软件系统都具备以下6个特性：

1，利用对象进行抽象
抽象(abstract)：真实世界的对象或概念的模型。

2，封装的类
封装(encapsulation)：向外界隐藏对象的所有内部细节的过程。
在Java中，通过在类定义里面来定义属性和方法的方式，强制实现封装过程。

对相关思想的抽象被封装在一个单元里，将抽象出来的状态和行为结合在一个封装的整体里，这个封装体称为类。
对系统的其他部分来说，状态和行为的真实内部实现被隐藏起来了。封装保证了对象的内部细节被隐藏起来，
不被其他对象发现，也保证了每个对象维护它自己唯一的标识符和状态，还保证了对象状态只能通过定义良好的消息来改变。

封装使得软件更健壮，更易于调试，更易于修改，也更易于长期维护。

封装的原则：

最大化封装：
每个类越独立越好，每个类都不应该对它的内部属性提供直接的访问。
类应该向外界提供能实现其职责的最少数目的方法。向外界提供的接口应该尽量少地受到类内部设计变化的影响。

最小化耦合：
作为最大化封装的一部分工作，应该将类之间的耦合最小化。
类应该只依赖于其他类提供的公有接口，而不依赖于其他类的内部工作原理。
在某些情况下，类必须耦合以实现共同的职责，这时也必须把耦合对外界的影响减到最低。

3，通过消息进行通信
为了能完成有用的任务，对象需要与其他对象进行互操作。
通过发送消息给其他对象，传递消息或请求动作，互操作得到处理(Java中是通过方法调用完成的)。
消息可用来改变对象的状态或请求该对象完成一个动作。

4，对象生命周期
所有对象都有生命周期。在程序运行过程中，对象在需要时被创建并初始化，继而存在并执行其功能，最终被销毁。
当对象存在时，它们维护自身的标识符和状态。每个对象都有独一无二的标识符，其属性值也和同类的其他对象实例有差别。

5，类层次结构
对象所属的类被组织成层次结构，借此对类之间的关系进行建模和描述。类之间的关系包括关联、聚合(组合)、继承等。

6，多态性
多态(polymorphism)：多态使得对任何对象自动调用其恰当的方法称为可能。
多态现象总是和继承以及从通用超类得到派生类一起发生。它是通过将对象与恰当的方法进行动态绑定来实现的。
多态性是面向对象系统最终表现出来的基本特征。
当使用继承扩展通用的类来得到特殊的类时，通常也会对通用类的一些行为进行扩展。
特殊类常常会实现与通用类有些差别的行为，但是行为的名字会保持一致。
给定一个对象实例，正确地使用它的行为非常重要，而多态性保证这一点自动并且无缝地实现。
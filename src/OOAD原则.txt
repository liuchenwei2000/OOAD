                                                                                             面向对象的设计原则

如何同时提高一个软件系统的可维护性(Maintainability)和可复用性(Reuseablity)是面向对象的设计要解决的核心问题。

通过学习和应用设计模式，可以更加深入的理解面向对象的设计观念，从而帮助设计师改善自己的系统设计。
但是设计模式并不能够提供具有普遍性的设计指导原则。
在经过一段时间的对设计模式的学习和使用之后，就会觉得这些孤立的设计模式的背后应当还有一些更为深层的、更具普遍性的、共同的思想原则。
它们是隐藏在设计模式背后的、比设计模式本身更加基本和单纯的设计思想。


系统随着性能要求的变化而"腐烂"的真正原因是：

1.过于僵硬（Rigidity）
很难在一个软件系统里加入一个新的性能，哪怕是很小的都很困难。

2.过于脆弱（Fragility）
与软件过于僵硬同时存在的，是软件系统在修改已有代码时过于脆弱。
对一个地方的修改，往往会导致看上去没有什么关系的另一个地方发生故障。

3.复用率低（Immobility）
已有代码依赖于一大堆其他的东西，以至于想复用的时候很难将它们分开。
于是重新写自己的代码，很可能还会使用源码拷贝的方法，以最原始的复用方式节省一些时间。

4.黏度过高（Viscosity）
有的时候，一个改动可以以保存原始设计意图和原始设计框架的方式进行，也可以以破环原始意图和框架的方式进行。
第一种方法无疑会对系统的未来有利，第二种方法是权宜之计，可以解决短期的问题，但是会牺牲中长期的利益。
一个系统设计，如果总是使得第二种方法比第一种方法容易，就叫做黏度过高。
一个黏度过高的系统会诱使维护它的程序员采取错误的维护方案，并惩罚采取正确维护方案的程序员。


一个好的系统设计应该有如下的性质：

1.可扩展性(Extensibility)：新的性能可以很容易的加入到系统中。是"过于僵硬"的属性的反面。

2.灵活性(Flexbility)：可以允许代码修改平稳地发生，而不会波及很多其他的模块。是"过于脆弱"的属性的反面。

3.可插入行(Pluggability)：可以很容易的将一个类抽出去，同时将另一个有相同接口的类加入进来。是"黏度过高"的反面。


复用：就是指一个软件的组成部分，可以在同一个项目的不同地方甚至另一个项目中重复使用。

软件复用的好处有：

1.较高的生产效率
一个可以重复使用的软件成分可以为将来的使用节省费用，也就是不必在以后使用时重复开发。

2.较高的软件质量
一个可复用的软件成分总是比不能复用的软件成分有更多的质量保证。如果一个复用率较高的软件构件有程序缺陷的话，这种缺陷可以更快的、更彻底的被排除。这样的软件成分必定是有利于系统的可维护性的。

3.恰当使用复用可以改善系统的可维护性


对于像Java这样的面向对象的语言，本身提供了抽象化、继承、封装和多态这些语言特征。使得一个系统可以在更高层次上提供可复用性。
数据的抽象化和继承关系使得概念和定义可以重复使用，多态性似的实现和应用可以复用，抽象化和封装可以保持和促进系统的可维护性。
这样一来，复用的焦点不再集中具体实现细节上，而是集中在最重要的含有宏观商业逻辑的抽象层次上。

抽象层次是一个应用系统做战略性判断和决定的地方，那么抽象层次就应当是较为稳定的，应该是复用的重点。
如果抽象层次的模块相对独立于具体层次的模块的话，要么具体层次内部的变化就不会影响到抽象层次的结构，所以抽象层次的模块的复用就会较为容易。


面向对象设计的原则

1.单一职责原则(SRP:Single-Responsibility Principle)：就一个类而言，应该仅有一个引起它变化的原因。

2.开闭原则(OCP:Open-Closed Principle)：软件实体(类、模块、函数等)应该是可以扩展的，但是不可修改。

3.里氏替换原则(LSP:Liskov Substitution Principle)：子类型必须能够替换掉它们的基类型。

4.依赖倒置原则(DIP:Dependency Inversion Principle)：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。

5.接口隔离原则(ISP:Interface Segregation Principle)：不应该强迫客户依赖于他们不用的方法，接口属于客户，不属于他所在的类层次结构。

6.组合/聚合复用原则(CARP:Composition/Aggregation Principle)              

7.迪米特法则(LoD:Law of Demeter)


恰当提高系统的可复用性对可维护性的支持：

1，可以提高系统的可扩展性
允许一个具有同样接口的新的类代替旧的类，是对抽象接口的复用。
客户端依赖于一个抽象的接口，而不是一个具体实现类，使得这个具体实现类可以被另一个具体实现类所取代，而不影响客户端。

系统的可扩展性由开闭原则、里氏替换原则、依赖倒置原则和组合/聚合复用原则保证。

2，可以提高系统的灵活性
在一个设计得当的系统中，每一个模块都相对于其他模块独立存在，并只保持与其他模块的尽可能少的通信。
这样一来，在其中某一个模块发生代码修改的时候，这个修改的压力不会传递到其他的模块。

系统的灵活性由开闭原则、迪米特法则和接口隔离原则保证。

3，可以提高系统的可插入性
在一个符合开闭原则的系统中，抽象层封装了与商业逻辑相关的重要行为，这些行为的具体实现由实现层给出。
当一个实现类不再满足需要，需要以另一个实现类取代的时候，系统的设计可以保证旧的类可以被拔出，新的类可以被插入。

系统的可插入性由开闭原则、里氏替换原则、依赖倒置原则和组合/聚合复用原则保证。
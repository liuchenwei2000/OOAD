                                                                                    类图中的关系

类与类之间的关系用类框之间的连线来表示，不同的关系用连线上和连线端头处的修饰符来区别。

类和类、类和接口、接口和接口之间可以建立以下几种关系：

1.一般化关系(Generalization)
一般化关系表示类与类之间的继承关系，接口与接口之间的继承关系，或类对接口的实现关系(Realization)。
一般化的关系是从子类指向父类的，或从实现接口的类指向被实现的接口，与继承或实现的方向相反。

2.关联关系(Association)
关联关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。
双向的关联可以有两个箭头或者没有箭头，单向的关联只有一个箭头，表示关联的方向。
单向的关联更为普遍，通常不鼓励使用双向的关联。

每一个关联都有两个端点，每一个端点都可以有一个角色名，显示出关联的本质。
在每一个关联的端点，还可以有一个基数，表明这一端的类可以有几个实例。

常见的基数有如下这些：

0..1                 零个或者一个实例
0..* 或者*           对实例的数目没有限制，可以是0
1                    只有一个实例
1..*                 至少有一个实例

在Java中，关联关系是使用实例变量实现的。

一个关联关系往往可以进一步确定为聚合关系或者组合关系。

3.聚合关系(Aggregation)
聚合关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系。

与关联关系一样，聚合关系也是通过实例变量实现的。
但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，
两个类是处在不平等的层次上的，一个代表整体，一个代表部分。

这在语法上是分辨不出的，需要考察所涉及的类之间的逻辑关系。

4.组合关系(Composition)
组合关系是关联关系的一种，是比聚合关系强的关系。
它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期，组合关系是不能共享的。

代表整体的对象需要负责保持部分对象的存活，在一些情况下负责将代表部分的对象湮灭掉。
代表整体的对象可以将代表部分的对象传递给另一个对象，由后者负责此对象的生命周期。
换言之，代表部分的对象在每一个时刻只能与一个对象发生组合关系，由后者排他的负责其生命周期。

5.依赖关系(Dependency)
依赖也是类与类之间的连接，它总是单向的，表示一个类依赖于另一个类的定义。
如图例所示，Person类依赖于Car类和House类的定义，因为Person类已用了Car和House。
与关联关系不同的是，Person类里并没有Car和House类型的属性，Car和House的实例是以参数的形式传入到buy()方法中去的。

依赖关系在Java中体现为局部变量、方法参数以及对静态方法的调用。详解如下：
一个类A的某一个局部变量的类型是另一个类B，那么类A就依赖于类B；
一个方法的参数是另一个类B的实例，那么这个方法所在的类A就依赖于类B；
一个类A调用另一个类B的静态方法，那么类A依赖于类B。
而如果类B出现在类A的实例变量中，那么类A与累B的关系就超越了依赖关系，而变成了一种关联关系。
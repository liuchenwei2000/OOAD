                      接口隔离原则(ISP:Interface Segregation Principle)

接口隔离原则：使用多个专门的接口比使用单一的总接口要好。
从客户端程序的角度讲：一个类对另一个类的依赖性应当是建立在最小的接口上的。

因为接口存在着两种理解，所以ISP的表达方式和含义也有所不同：

1，接口是一个类所提供的所有方法的特征集合，也就是一种在逻辑上才存在的概念。
一个接口相当于剧本中的一个角色，而此角色在一个舞台上由哪个演员来扮演则相当于接口的实现。
因此，一个接口应当简单的代表一个角色，而不是多个角色。
如果系统涉及到多个角色的话，那么每一个角色都应当由一个特定的接口代表。

2，接口是狭义的Java接口，ISP说的是为同一个角色(类)提供宽窄不同的接口，以对付不同的客户端，满足不同的需要。
这叫做定制服务(Customized Service)。如 定制服务类图.PNG 所示：
有一个角色(类)Service以及三个不同的客户端，这三个客户端需要的服务是不尽相同的，
因此系统分别为它们提供了三个不同的Java接口，即IService1，IService2，IService3。
每一个Java接口都仅仅将客户端需要的行为暴露给客户端，而没有将其不需要的行为放到接口中。


接口污染(Interface Contamination)

由于每一个接口都代表一个角色，实现一个接口的对象，在它的整个生命周期中都扮演这个角色，因此将角色区分清楚就是系统设计的一个重要工作。
所以不应当将几个不同的角色都交给同一个接口，而应当交给不同的接口。
没有经验的设计师往往想节省接口的数目，因此将一些看上去差不多的接口合并，并且看作是代码优化的一部分，这是错误的。
准确而恰当的划分角色以及角色所对应的接口，是面向对象的设计的一个重要的组成部分。
将没有关系的接口合并在一起，形成一个臃肿的大接口，这就是接口污染。

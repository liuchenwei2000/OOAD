                                   OOAD基本概念

OOA、OOD和OOP(Object-Oriented Analysis、Design和Program)

设计一个OO系统包括识别系统包含那些对象、识别这些对象的行为和职责，以及对象之间是如何交互的。

优势：
面向对象的设计通常比较简洁并且易于理解。一旦完成设计，常常可以分开来实现和测试单独的对象。每个对象会比较健壮并且无错。当修改系统时，现存的对象仍能继续工作。
当改进现存的对象时，它们对外界的接口保存不变，所以整个系统能继续工作。正是这种易于改变的特性和健壮性，使得OO软件开发真正不同于其他开发方式。


OO使用的一些基本术语：

对象(Object)：面向对象的基本单位。
对象是一个拥有属性、行为和标识符的实体。对象是类的实例，对象的属性和行为在类定义中定义。

类(Class)：类是一组对象的描述，这一组对象有共同的属性和行为。
类的定义描述了这个类的所有对象的属性，也描述了实现该类对象的行为方法。

类和对象的关系：
类是对所有该类对象的特征的描述或定义；对象是类的一个实例，当程序运行时，对象被创建并存在。
在某一时刻，一个类可以只有一个对象存在，也可以有任意多对象存在。同一个类的对象有着相似的行为。


抽象类(abstract class)：不能实例化的类。
通常定义抽象类是基于这样的假设：将从它派生出具体的子类，扩展其基本属性和行为。它们从来不会有任何实例，设计它们是为了被子类使用。

类属性(class attribute)：类的属性，由类的所有实例共享。
每个类属性只有一份拷贝，无需创建任何类实例，也可以访问这些类属性。在Java中也被称为静态(static)属性。

类方法(class method)：由类定义的方法，只能对类属性进行操作。
类方法可以在没有创建任何类实例的情况下调用。在Java中也被称为静态(static)方法。

实例属性(instance attribute)：与类的特定实例相联系的类的属性。
每个实例都有自己的实例属性拷贝。

实例方法(instance method)：类定义的用于操作实例属性的方法。
这是类定义的最常见的一种类型的方法。实例方法只能用在相关的类的实例上。


关联：是两个类之间的一种关系，表明类的对象之间的相互关系是如何的。

整体/部分：类之间的一种关系，一个类由其他类的对象组成或容纳了其他类的对象。

聚合(aggregation)：一种整体/部分层次关系。
一个聚合对象包括(拥有)其他对象，每个被包括的对象被认为是聚合对象的一部分，该对象可以来去自由，不是必需的。如图书馆和书。

组合(composition)：组合是聚合的一种形式，在这种情况下，没有其组成部分，整体就不能存在，也就是对象是整体的不可缺少的部分。如书和页。

聚合和组合的区别：在聚合中，销毁整体时，部分依然存在；在组合中，当整体销毁时，部分也就同时被销毁。


动态绑定：在运行时刻才能确定对象实例究竟属于哪个类，从而调用该类的正确方法。

                                                                                             面向对象的设计原则

如何同时提高一个软件系统的可维护性(Maintainability)和可复用性(Reuseablity)是面向对象的设计要解决的核心问题。

通过学习和应用设计模式，可以更加深入的理解面向对象的设计观念，从而帮助设计师改善自己的系统设计。但是设计模式并不能够提供具有普遍性的设计指导原则。
在经过一段时间的对设计模式的学习和使用之后，就会觉得这些孤立的设计模式的背后应当还有一些更为深层的、更具普遍性的、共同的思想原则。
它们是隐藏在设计模式背后的、比设计模式本身更加基本和单纯的设计思想。


一个好的系统设计应该有如下的性质：

1.可扩展性(Extensibility)：新的性能可以很容易的加入到系统中。是"过于僵硬"的属性的反面。

2.灵活性(Flexbility)：可以允许代码修改平稳地发生，而不会波及很多其他的模块。是"过于脆弱"的属性的反面。

3.可插入性(Pluggability)：可以很容易的将一个类抽出去，同时将另一个有相同接口的类加入进来。是"黏度过高"的反面。


复用：就是指一个软件的组成部分，可以在同一个项目的不同地方甚至另一个项目中重复使用。

对于像Java这样的面向对象的语言，本身提供了抽象化、继承、封装和多态这些语言特征。使得一个系统可以在更高层次上提供可复用性。
数据的抽象化和继承关系使得概念和定义可以重复使用，多态性使得实现和应用可以复用，抽象化和封装可以保持和促进系统的可维护性。
这样一来，复用的焦点不再集中具体实现细节上，而是集中在最重要的含有宏观商业逻辑的抽象层次上。

抽象层次是一个应用系统做战略性判断和决定的地方，那么抽象层次就应当是较为稳定的，应该是复用的重点。
如果抽象层次的模块相对独立于具体层次的模块的话，要么具体层次内部的变化就不会影响到抽象层次的结构，所以抽象层次的模块的复用就会较为容易。


面向对象设计的原则

1.单一职责原则(SRP:Single-Responsibility Principle)：就一个类而言，应该仅有一个引起它变化的原因。

2.开闭原则(OCP:Open-Closed Principle)：软件实体(类、模块、函数等)应该是可以扩展的，但是不可修改。

3.里氏替换原则(LSP:Liskov Substitution Principle)：子类型必须能够替换掉它们的基类型。

4.依赖倒置原则(DIP:Dependency Inversion Principle)：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。

5.接口隔离原则(ISP:Interface Segregation Principle)：不应该强迫客户依赖于他们不用的方法，接口属于客户，不属于他所在的类层次结构。

6.组合/聚合复用原则(CARP:Composition/Aggregation Principle)              

7.迪米特法则(LoD:Law of Demeter)
